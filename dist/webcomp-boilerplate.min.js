(()=>{var t={165:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.polygons=[]}setPolygons(t){this.polygons=t}getPolygons(){return this.polygons}connectedCallback(){this.render(),this.setAttribute("data-area","buffer"),this.shadowRoot.addEventListener("dragover",t=>{t.preventDefault(),t.dataTransfer.dropEffect="move"}),this.shadowRoot.addEventListener("drop",t=>{t.preventDefault();const e=JSON.parse(t.dataTransfer.getData("application/json")),n=t.dataTransfer.getData("from"),o=this.getAttribute("data-area"),s=this.shadowRoot.querySelector(".polygon-container").getBoundingClientRect(),a=t.clientX-s.left,r=t.clientY-s.top;e.x=a,e.y=r,this.dispatchEvent(new CustomEvent("polygon-dropped",{bubbles:!0,composed:!0,detail:{polygon:e,from:n,to:o}}))})}setPolygons(t){this.polygons=t,this.render()}render(){console.log("this.polygons   ",this.polygons),this.shadowRoot.innerHTML=`\n  <style>\n    :host {\n      display: block;\n      border: 1px solid #888;\n      height: 200px;\n      overflow: auto;\n      margin-bottom: 10px;\n      background: var(--bg-buffer);\n      padding: 5px;\n    }\n\n    .polygon-container {\n      position: relative;  /* Система координат для абсолютного позиционирования */\n      width: 100%;\n      height: 100%;\n    }\n\n    .draggable {\n      position: absolute;   /* Позволяет располагать по координатам */\n      width: 120px;\n      height: 100px;\n      cursor: grab;\n      box-sizing: border-box;\n    }\n\n    svg {\n      width: 100%;\n      height: 100%;\n      display: block;\n    }\n\n    polygon {\n      fill: var(--polygon-fill, lightblue);\n      stroke: var(--polygon-stroke, blue);\n      stroke-width: 2;\n    }\n  </style>\n\n  <div class="polygon-container">\n    ${this.polygons.map(t=>`\n      <div\n        class="draggable"\n        draggable="true"\n        data-id="${t.id}"\n        style="left: ${t.x}px; top: ${t.y}px;"\n      >\n        <svg viewBox="0 0 120 100" preserveAspectRatio="xMidYMid meet">\n          <polygon points="${t.points}"></polygon>\n        </svg>\n      </div>\n    `).join("")}\n  </div>\n`,this.shadowRoot.querySelectorAll(".draggable").forEach(t=>{t.addEventListener("click",e=>{const n=t.getAttribute("data-id"),o=this.polygons.find(t=>t.id===n);console.log("✅ click on polygon",n,o)}),t.addEventListener("dragstart",e=>{const n=t.getAttribute("data-id"),o=this.polygons.find(t=>t.id===n);console.log("✅ dragstart for polygon",n),e.dataTransfer.setData("application/json",JSON.stringify(o)),e.dataTransfer.effectAllowed="move",e.dataTransfer.setData("from",this.getAttribute("data-area"))})})}}customElements.define("polygon-buffer",t)},663:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.shadowRoot.innerHTML='\n    <style>\n    :host {\n        display: block;\n        margin-bottom: 10px;\n    }\n\n    button {\n        margin-right: 8px;\n        background: #222;\n        color: var(--text-color);\n        border: 1px solid #444;\n        padding: 5px 10px;\n        cursor: pointer;\n    }\n\n    button:hover {\n        background: #333;\n    }\n    </style>\n      <button id="create">Создать</button>\n      <button id="save">Сохранить</button>\n      <button id="reset">Сбросить</button>\n    ',this.shadowRoot.getElementById("create").addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("create-polygons",{bubbles:!0,composed:!0}))}),this.shadowRoot.getElementById("save").addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("save-polygons",{bubbles:!0,composed:!0}))}),this.shadowRoot.getElementById("reset").addEventListener("click",()=>{this.dispatchEvent(new CustomEvent("reset-polygons",{bubbles:!0,composed:!0}))})}}customElements.define("app-controls",t)},838:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.scale=1,this.offsetX=0,this.offsetY=0,this.isDragging=!1,this.dragStart={x:0,y:0},this.polygons=[]}connectedCallback(){this.setAttribute("data-area","workspace"),this.render(),this.attachEvents()}render(){this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: block;\n          height: 400px;\n          border: 1px solid #444;\n          background: var(--bg-workspace, #fff);\n          overflow: hidden;\n          position: relative;\n          user-select: none;\n        }\n\n        .polygon-container {\n          position: relative;\n          width: 100%;\n          height: 100%;\n          transform-origin: top left;\n        }\n\n        .draggable {\n          position: absolute;\n          width: 120px;\n          height: 100px;\n          cursor: grab;\n        }\n\n        svg {\n          width: 100%;\n          height: 100%;\n          display: block;\n          pointer-events: none;\n        }\n\n        .scale-line {\n          stroke: #aaa;\n          stroke-width: 1;\n        }\n\n        .scale-text {\n          font-size: 10px;\n          fill: #888;\n        }\n\n        polygon {\n          fill: var(--polygon-fill, lightblue);\n          stroke: var(--polygon-stroke, blue);\n          stroke-width: 2;\n        }\n          #grid {\n            position: absolute;\n            top: 0; left: 0;\n            width: 100%;\n            height: 100%;\n            pointer-events: none; /* чтобы сетка не перехватывала события */\n            z-index: 1;\n            }\n        #content {\n            position: relative;\n            z-index: 2;\n            }\n      </style>\n      <div class="polygon-container">\n        <svg id="grid"></svg>\n        <div id="content"></div>\n      </div>\n    ',this.setPolygons(this.polygons),this.updateTransform(),this.drawScale()}updateTransform(){this.shadowRoot.querySelector("#content").style.transform=`translate(${this.offsetX}px, ${this.offsetY}px) scale(${this.scale})`,this.drawScale()}drawScale(){const t=this.shadowRoot.querySelector("#grid");t.innerHTML="";const e=t.clientWidth,n=t.clientHeight,o=50/this.scale,s=-this.offsetX/this.scale,a=-this.offsetY/this.scale,r=(e-this.offsetX)/this.scale,i=(n-this.offsetY)/this.scale;for(let e=Math.floor(s/o)*o;e<r;e+=o){const o=e*this.scale+this.offsetX,s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("x1",o),s.setAttribute("y1",0),s.setAttribute("x2",o),s.setAttribute("y2",n),s.setAttribute("class","scale-line"),t.appendChild(s);const a=document.createElementNS("http://www.w3.org/2000/svg","text");a.setAttribute("x",o+2),a.setAttribute("y",10),a.setAttribute("class","scale-text"),a.textContent=Math.round(e),t.appendChild(a)}for(let n=Math.floor(a/o)*o;n<i;n+=o){const o=n*this.scale+this.offsetY,s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("x1",0),s.setAttribute("y1",o),s.setAttribute("x2",e),s.setAttribute("y2",o),s.setAttribute("class","scale-line"),t.appendChild(s);const a=document.createElementNS("http://www.w3.org/2000/svg","text");a.setAttribute("x",2),a.setAttribute("y",o-2),a.setAttribute("class","scale-text"),a.textContent=Math.round(n),t.appendChild(a)}}attachEvents(){const t=this.shadowRoot.querySelector(".polygon-container");t.addEventListener("wheel",e=>{e.preventDefault();const n=.001*-e.deltaY;let o=this.scale+n;o=Math.min(Math.max(o,.1),10);const s=t.getBoundingClientRect(),a=e.clientX-s.left,r=e.clientY-s.top;this.offsetX=a-(a-this.offsetX)/this.scale*o,this.offsetY=r-(r-this.offsetY)/this.scale*o,this.scale=o,this.updateTransform()}),t.addEventListener("mousedown",e=>{0===e.button&&e.target===t&&(this.isDragging=!0,this.dragStart.x=e.clientX-this.offsetX,this.dragStart.y=e.clientY-this.offsetY)}),window.addEventListener("mouseup",()=>{this.isDragging=!1}),window.addEventListener("mousemove",t=>{this.isDragging&&(this.offsetX=t.clientX-this.dragStart.x,this.offsetY=t.clientY-this.dragStart.y,this.updateTransform())}),this.shadowRoot.addEventListener("dragover",t=>{t.preventDefault(),t.dataTransfer.dropEffect="move"}),this.shadowRoot.addEventListener("drop",e=>{e.preventDefault();const n=e.dataTransfer.getData("application/json");if(!n)return;const o=JSON.parse(n),s=t.getBoundingClientRect(),a=(e.clientX-s.left-this.offsetX)/this.scale,r=(e.clientY-s.top-this.offsetY)/this.scale;o.x=a,o.y=r;const i=this.polygons.findIndex(t=>t.id===o.id);i>=0?this.polygons[i]=o:this.polygons.push(o),this.setPolygons(this.polygons),this.dispatchEvent(new CustomEvent("polygon-dropped",{bubbles:!0,composed:!0,detail:{polygon:o}}))})}setPolygons(t){this.polygons=t||[];const e=this.shadowRoot.querySelector("#content");e&&(e.innerHTML="",this.polygons.forEach(t=>{const n=document.createElement("div");n.classList.add("draggable"),n.setAttribute("draggable","true"),n.setAttribute("data-id",t.id),n.style.left=t.x+"px",n.style.top=t.y+"px";const o=document.createElementNS("http://www.w3.org/2000/svg","svg");o.setAttribute("viewBox","0 0 120 100");const s=document.createElementNS("http://www.w3.org/2000/svg","polygon");s.setAttribute("points",t.points),s.setAttribute("fill",t.fill||"rgba(128,0,0,0.6)"),s.setAttribute("stroke",t.stroke||"#800000"),s.setAttribute("stroke-width","2"),o.appendChild(s),n.appendChild(o),e.appendChild(n),n.addEventListener("dragstart",e=>{e.dataTransfer.setData("application/json",JSON.stringify(t)),e.dataTransfer.setData("from",this.getAttribute("data-area")),e.dataTransfer.effectAllowed="move"})}))}getPolygons(){return this.polygons}}customElements.define("polygon-workspace",t)},911:()=>{class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}connectedCallback(){this.render(),this.addEventListeners()}render(){this.shadowRoot.innerHTML='\n      <style>\n        .draggable {\n          width: 200px;\n          height: 100px;\n          display: inline-block;\n          border: 1px solid #ccc;\n          cursor: grab;\n          margin-bottom: 10px;\n        }\n\n        .dropzone {\n          width: 100%;\n          height: 120px;\n          border: 2px dashed #999;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          background: #f5f5f5;\n          color: #666;\n          font-family: sans-serif;\n        }\n\n        svg {\n          width: 100%;\n          height: 100%;\n        }\n\n        polygon {\n          fill: lightblue;\n          stroke: blue;\n          stroke-width: 2;\n        }\n      </style>\n\n      <div class="draggable" draggable="true" data-id="test-poly">\n        <svg viewBox="0 0 200 100" preserveAspectRatio="xMidYMid meet">\n          <polygon points="50,10 150,10 100,90"></polygon>\n        </svg>\n      </div>\n\n      <div class="dropzone">Drop here</div>\n    '}addEventListeners(){const t=this.shadowRoot.querySelector(".draggable"),e=this.shadowRoot.querySelector(".dropzone");t.addEventListener("click",()=>{const e=t.getAttribute("data-id");console.log("✅ Polygon clicked:",e)}),t.addEventListener("dragstart",e=>{const n=t.getAttribute("data-id");console.log("✅ Drag started on polygon:",n),e.dataTransfer.setData("text/plain",n),e.dataTransfer.effectAllowed="move";const o=document.createElement("canvas");o.width=20,o.height=20;const s=o.getContext("2d");s.fillStyle="rgba(0,0,255,0.5)",s.beginPath(),s.moveTo(10,0),s.lineTo(20,20),s.lineTo(0,20),s.closePath(),s.fill(),e.dataTransfer.setDragImage(o,10,10)}),e.addEventListener("dragover",t=>{t.preventDefault(),t.dataTransfer.dropEffect="move"}),e.addEventListener("drop",t=>{t.preventDefault();const n=t.dataTransfer.getData("text/plain");console.log("✅ Dropped polygon with id:",n),e.textContent=`Polygon "${n}" dropped!`})}}customElements.define("test-polygon",t)}},e={};function n(o){var s=e[o];if(void 0!==s)return s.exports;var a=e[o]={exports:{}};return t[o](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var o in e)n.o(e,o)&&!n.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{"use strict";n(663),n(165),n(838),n(911);const t=document.querySelector("app-controls"),e=document.querySelector("polygon-buffer"),o=document.querySelector("polygon-workspace");function s(t=3){const e=[];for(let n=0;n<t;n++){const t=120*Math.random(),n=100*Math.random();e.push({x:t,y:n})}const n=e.reduce((t,e)=>(t.x+=e.x,t.y+=e.y,t),{x:0,y:0});return n.x/=e.length,n.y/=e.length,e.sort((t,e)=>Math.atan2(t.y-n.y,t.x-n.x)-Math.atan2(e.y-n.y,e.x-n.x)),e.map(t=>`${t.x.toFixed(2)},${t.y.toFixed(2)}`).join(" ")}t.addEventListener("create-polygons",()=>{const t=function(){const t=Math.floor(16*Math.random())+5,e=[];for(let n=0;n<t;n++){const t=s(Math.floor(6*Math.random())+3);e.push({id:`poly-${n}`,points:t,x:Math.floor(300*Math.random()),y:Math.floor(150*Math.random())})}return e}();e.setPolygons(t),o.setPolygons([])}),t.addEventListener("save-polygons",()=>{const t={bufferPolygons:e.getPolygons(),workspacePolygons:o.getPolygons()};localStorage.setItem("polygons",JSON.stringify(t)),alert("Полигоны сохранены!")}),t.addEventListener("reset-polygons",()=>{localStorage.removeItem("polygons"),e.setPolygons([]),o.setPolygons([]),alert("Данные очищены")}),window.addEventListener("DOMContentLoaded",()=>{const t=localStorage.getItem("polygons");if(t){const n=JSON.parse(t);e.setPolygons(n.bufferPolygons||[]),o.setPolygons(n.workspacePolygons||[])}}),document.addEventListener("polygon-dropped",t=>{const{polygon:e,from:n,to:o}=t.detail,s=document.querySelector(`[data-area="${n}"]`),a=document.querySelector(`[data-area="${o}"]`);if(s&&a)if(n===o){const t=s.getPolygons().map(t=>t.id===e.id?e:t);s.setPolygons(t)}else{const t=s.getPolygons().filter(t=>t.id!==e.id),n=[...a.getPolygons(),e];s.setPolygons(t),a.setPolygons(n)}})})()})();